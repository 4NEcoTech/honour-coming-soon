import mongoose from "mongoose";
import { customAlphabet } from "nanoid";

const nanoid = customAlphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgjijklmnopqrstuvwxyz0123456789", 7);

/**
 * Schema for EcoLink in EcoLink System.
 *
 * @typedef {Object} EcoLinkSchema
 * @property {mongoose.Schema.Types.ObjectId} ECL_EL_EcoLink_Id - Primary Key: MongoDB system-generated ID.
 * @property {String} ECL_EL_EcoLinkCode - Foreign Key: A 7-character ID generated using NanoID.
 * @property {String} ECL_EL_EcoLink_Custom_Code - Optional custom EcoLink code set by the user.
 * @property {mongoose.Schema.Types.ObjectId} ECL_EL_Id - Foreign Key: Can reference an individual, company, or T-shirt ID (MongoDB system-generated ID).
 * @property {Number} ECL_EL_Id_Source - Defines which table the ID is fetched from (01 Individual, 02 Company, 03 T-shirt, 04 Others).
 * @property {Boolean} ECL_EL_Photo_ViewPermission - Determines if the photo can be viewed (Non-living things always have view permission).
 * @property {Number} ECL_EL_Product - Product type for which the EcoLink was created (01 URL shortener, 02 HCJ, 03 4Sign, 04 Honour, 05 TeeEvo).
 * @property {String} ECL_EL_Profile_Url - Profile URL (e.g., 4n.Eco/abc1234).
 * @property {String} ECL_EL_EcoLink_Name - Full Name (Derived from Individual_Details table: ID_First_Name + ID_Last_Name).
 * @property {Buffer} ECL_EL_EcoLink_QR_Code - QR Code (Generated by the system and stored as BLOB).
 * @property {Number} ECL_EL_EcoLink_Number_Of_Followers - Number of followers.
 * @property {Number} ECL_EL_EcoLink_Number_Of_Connections - Number of user connections.
 * @property {String} ECL_EL_Address - Address (Line 1, Line 2, Pincode, and occasionally Country).
 * @property {Boolean} ECL_EL_Address_ViewPermission - Determines if the address can be viewed.
 * @property {String} ECL_EL_Current_City - Current city location.
 * @property {Boolean} ECL_EL_City_ViewPermission - City View Permissions (Non-living things always have view permission, only humans can hide it).
 * @property {String} ECL_EL_Current_State - Current state location.
 * @property {Boolean} ECL_EL_State_ViewPermission - State View Permissions (Non-living things always have view permission, only humans can hide it).
 * @property {String} ECL_EL_Featured_Post - Optional featured post (assumed to be a weblink).
 * @property {String} ECL_EL_Phone_Number - Contact phone number.
 * @property {Boolean} ECL_EL_Phone_ViewPermission - Phone View Permissions (Non-living things always have view permission, only humans can hide it).
 * @property {String} ECL_EL_Email_Address - Contact email address.
 * @property {Boolean} ECL_EL_Email_ViewPermission - Email View Permissions (Non-living things always have view permission, only humans can hide it).
 * @property {String} ECL_EL_Website_Url - Personal website URL (e.g., https://gowthaman.co.in/).
 * @property {Number} ECL_EL_Session_Id - Session identifier.
 * @property {Date} ECL_EL_Creation_DtTym - Profile creation date (Used for tracking modifications and access).
 * @property {String} ECL_EL_Audit_Trail - Audit trail information (Defined by the technical team).
 * @property {Date} createdAt - The timestamp when the document was created (managed by Mongoose).
 * @property {Date} updatedAt - The timestamp when the document was last updated (managed by Mongoose).
 */



const EcoLinkSchema = new mongoose.Schema(
  {
 //   ECL_EL_EcoLink_Id: { type: mongoose.Schema.Types.ObjectId, auto: true },
    ECL_EL_EcoLinkCode: { type: String, unique: true, default: () => nanoid(7) },
    ECL_EL_EcoLink_Custom_Code: { type: String, default: "" },
    ECL_EL_Id: { type: mongoose.Schema.Types.ObjectId, required: true, refPath: "ECL_EL_Id_Source" },
    ECL_EL_Id_Source: { type: String, required: true, enum: ["IndividualDetails", "CompanyDetails"] }, // 01 Individual, 02 Company, 03 T-shirt, 04 Others
    ECL_EL_Photo_ViewPermission: { type: Boolean, default: false },
    ECL_EL_Product: { type: Number, required: true, default: '10000'}, 
    ECL_EL_Profile_Url: { type: String, required: false },
    ECL_EL_EcoLink_Name: { type: String, required: true },
    ECL_EL_EcoLink_QR_Code: { type: String, required: true },
    ECL_EL_EcoLink_Number_Of_Followers: { type: Number, default: 0 },
    ECL_EL_EcoLink_Number_Of_Connections: { type: Number, default: 0 },
    ECL_EL_Address: { type: String, default: "" },
    ECL_EL_Address_ViewPermission: { type: Boolean, default: false },
    ECL_EL_Current_City: { type: String, required: true },
    ECL_EL_City_ViewPermission: { type: Boolean, default: false },
    ECL_EL_Current_State: { type: String, required: true },
    ECL_EL_State_ViewPermission: { type: Boolean, default: false },
    ECL_EL_Featured_Post: { type: String, default: "" },
    ECL_EL_Phone_Number: { type: String, default: "" },
    ECL_EL_Phone_ViewPermission: { type: Boolean, default: false },
    ECL_EL_Email_Address: { type: String, default: "" },
    ECL_EL_Email_ViewPermission: { type: Boolean, default: false },
    ECL_EL_Website_Url: { type: String, default: "" },
    ECL_EL_Session_Id: { type: Number, required: false },
    ECL_EL_Creation_DtTym: { type: Date, default: Date.now },
    ECL_EL_Audit_Trail: { type: String, required: true }
  },
  { timestamps: true }
);

const EcoLink =
  mongoose.models["ECL_ECOLINK"] ||
  mongoose.model("ECL_ECOLINK", EcoLinkSchema);

export default EcoLink;
